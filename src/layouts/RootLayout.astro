---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';

const { title, shortDescription } = Astro.props.frontmatter || Astro.props;
---

<script is:inline>
  function getPreferredTheme() {
    const darkQuery = window.matchMedia('(prefers-color-scheme: dark)');

    return (
      window.localStorage.getItem('theme') ||
      (darkQuery.matches ? 'dark' : 'light')
    );
  }

  const theme = getPreferredTheme();

  if (theme === 'dark') {
    document.documentElement.classList.add('dark');
  }

  document.documentElement.style.setProperty('--current-theme', theme);

  document.addEventListener('alpine:init', () => {
    Alpine.data('theme', () => {
      return {
        theme,
        toggleTheme() {
          document.documentElement.classList.remove(this.theme);

          this.theme = this.theme === 'light' ? 'dark' : 'light';
          this.savePreferredTheme();
        },
        savePreferredTheme() {
          window.localStorage.setItem('theme', this.theme);
          document.documentElement.style.setProperty(
            '--current-theme',
            this.theme
          );
        },
        init() {
          // Initialize the theme based on the preferred theme or default to 'light'
          this.theme = getPreferredTheme();
        },
      };
    });
  });
</script>

<html
  lang='en'
  x-data='theme'
  x-bind:class='theme === "dark" ? "dark" : "light"'
  x-init='init'
  transition:animate='none'
>
  <head>
    <BaseHead title={title} description={shortDescription} />
  </head>
  <body
    class='bg-white text-black antialiased transition-colors dark:bg-background-700 dark:text-white'
  >
    <div class='mb-40 max-w-3xl md:mx-auto'>
      <main class='flex min-w-0 flex-auto flex-col px-2 md:px-0'>
        <Header />
        <div class='mx-4 md:mx-0'>
          <slot />
        </div>
      </main>
    </div>
    <Footer />
    <script is:inline transition:persist>
      document.addEventListener('alpine:init', () => {
        const hasAnimationTimelineSupport = CSS.supports(
          'animation-timeline: view()'
        );
        Alpine.data('highlight', () => ({
          highlight: false,

          intersect: !hasAnimationTimelineSupport
            ? {
                'x-intersect'() {
                  this.highlight = true;
                },
              }
            : {},
        }));
      });
    </script>
    <script is:inline transition:persist>
      document.addEventListener('alpine:init', () => {
        Alpine.data('navbar', () => ({
          mobileMenuOpen: false,

          toggleMobileNavigation(state) {
            if (state) {
              document.body.style.overflow = 'hidden';
            } else {
              document.body.style.overflow = 'visible';
            }
            this.mobileMenuOpen = state;
          },
        }));
      });
    </script>
  </body>
</html>
