---
import path from 'path';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { hexToHsl } from '../utils/color';

export function readAccentHexFromStylesheet(): string {
  const __filename = fileURLToPath(import.meta.url);

  const __dirname = path.dirname(__filename);

  const CSS_PATH = '../styles/global.css';
  // Read the file synchronously
  const paths = path.join(__dirname, CSS_PATH);
  const fileContent = readFileSync(paths, 'utf8');

  // Find the line containing --color-accent-base and extract its value
  const match = fileContent.match(/--color-accent-base:\s*([^;]+)/);
  const accentBaseValue = match ? match[1].trim() : null;

  return accentBaseValue!;
}

const accentBaseValue = readAccentHexFromStylesheet();
const [accentHue, ,] = hexToHsl(accentBaseValue);
---

<style define:vars={{ accentHue }} is:global>
  mark {
    --lightness: 80%;
    --highlighted: 1;
    --highlight: hsl(var(--accentHue, 45) 80% var(--lightness));
    background: transparent;
  }

  .dark mark {
    --lightness: 35%;
  }

  mark span {
    background: linear-gradient(
        120deg,
        var(--highlight, lightblue) 50%,
        transparent 50%
      )
      110% 0 / 200% 100% no-repeat;
    background-position: calc((1 - var(--highlighted)) * 110%) 0;
    transition: background-position 1s;
  }

  @supports (animation-timeline: view()) {
    mark {
      --highlighted: 0;
      animation: highlight steps(1) both;
      animation-timeline: view();
      animation-range: entry 100% cover 10%;
    }
  }

  @keyframes highlight {
    to {
      --highlighted: 1;
    }
  }
</style>

<script is:inline>
  document.addEventListener('alpine:init', () => {
    const hasAnimationTimelineSupport = CSS.supports(
      'animation-timeline: view()'
    );
    Alpine.data('highlight', () => ({
      highlight: false,

      intersect: !hasAnimationTimelineSupport
        ? {
            'x-intersect'() {
              console.log('hasdfasd');
              this.highlight = true;
            },
          }
        : {},
    }));
  });
</script>

<mark
  class='text-primary-900 dark:text-primary-100'
  x-data='highlight'
  x-bind='intersect'
  x-bind:style='{ "--highlighted": highlight ? 1 : 0 }'
>
  <span><slot /></span>
</mark>
